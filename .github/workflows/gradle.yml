name: Gradle

on:
  push:
    tags:
      - v*
  pull_request:
    branches: [ v1.* ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Validate gradle wrapper
      uses: gradle/wrapper-validation-action@v1
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17

    - name: Restore caches
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*', 'gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*' ,'gradle-wrapper.properties') }}
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build -x test
    - name: Run unit tests
      run: ./gradlew test

    - name: Store Private key
      if: contains(github.event.push.ref, '/tags/')
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: private.key
        contents: ${{ secrets.PRIV_KEY }}
        write-mode: overwrite
    - name: Publish
      if: contains(github.event.push.ref, '/tags/')
      env:
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        SIGN_KEY: ${{ secrets.PRIV_KEY_PASS }}
      run: |
        mkdir -p $HOME/.gnupg
        echo use-agent >> $HOME/.gnupg/gpg.conf
        echo pinentry-mode loopback >> $HOME/.gnupg/gpg.conf
        echo allow-loopback-pinentry >> $HOME/.gnupg/gpg-agent.conf
        gpg --batch --import private.key
        gpg --batch --export-secret-keys --passphrase $SIGN_KEY "Sebastiaan de Schaetzen <sebastiaan.de.schaetzen@gmail.com>" > private.gpg

        NEW_VERSION=$(echo ${{ github.event.push.ref }} | 's:refs/tags/v::')

        ./gradlew publishMockBukkitPublicationToRepositoryRepository \
          -Pmockbukkit.version=$NEW_VERSION \
          -PossrhUsername=seeseemelk \
          -PossrhPassword=$OSSRH_PASSWORD \
          -Psigning.secretKeyRingFile=private.gpg \
          -Psigning.keyId=${{ secrets.PRIV_KEY_ID }} \
          -Psigning.password=$SIGN_KEY
